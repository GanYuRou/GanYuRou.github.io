<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS之数组去重</title>
    <link href="/2020/10/28/unique/"/>
    <url>/2020/10/28/unique/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一：Set集合"><a href="#方法一：Set集合" class="headerlink" title="方法一：Set集合"></a>方法一：Set集合</h2><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NaN</span>, <span class="hljs-literal">NaN</span>];<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eliminate1</span>(<span class="hljs-params">arr</span>) </span>&#123;    <span class="hljs-keyword">return</span> [...new <span class="hljs-built_in">Set</span>(arr)];&#125;<span class="hljs-built_in">console</span>.log(eliminate1(array)); <span class="hljs-comment">//[3, 5, 4, 6, 0, NaN]</span></code></pre><p>Set构造器可以传入一个<code>可迭代的对象</code>，这时Set会自动将重复的元素移除，但是此时返回的是Set集合；直接返回是不对的，需要将该集合<code>转化为数组</code>，ES6中可以通过展开语法符展开，并使用数组字面量接收</p><h2 id="方法二-：indexOf方法"><a href="#方法二-：indexOf方法" class="headerlink" title="方法二 ：indexOf方法"></a>方法二 ：indexOf方法</h2><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eliminate2</span>(<span class="hljs-params">arr</span>) </span>&#123;    <span class="hljs-keyword">let</span> result = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr.length; i &lt; len; i++) &#123;        result.indexOf(arr[i]) === <span class="hljs-number">-1</span> &amp;&amp; result.push(arr[i]);    &#125;    <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-built_in">console</span>.log(eliminate2(array)); <span class="hljs-comment">//[3, 5, 4, 6, 0, NaN，NaN]</span></code></pre><p>这里有一个奇怪的点：NaN并不会被移除重复的，这是为什么呢？<code>NaN == NaN返回的是false</code>，indexOf方法的内部是通过===进行筛选的，故NaN永远都会返回-1，每一项NaN都会添加到result数组中。</p><h2 id="方法三-：filter方法"><a href="#方法三-：filter方法" class="headerlink" title="方法三 ：filter方法"></a>方法三 ：filter方法</h2><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eliminate3</span>(<span class="hljs-params">arr</span>) </span>&#123;    <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> &#123;        <span class="hljs-keyword">return</span> array.indexOf(item) === index;    &#125;);&#125;<span class="hljs-built_in">console</span>.log(eliminate3(array)); <span class="hljs-comment">//[3, 5, 4, 6, 0]</span></code></pre><p>这里没有NaN就不会觉得奇怪了；array.indexOf(NaN) == -1不会等于原始项的下标</p><h2 id="方法四-：reduce方法"><a href="#方法四-：reduce方法" class="headerlink" title="方法四 ：reduce方法"></a>方法四 ：reduce方法</h2><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eliminate4</span>(<span class="hljs-params">arr</span>) </span>&#123;<span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result ,item</span>) =&gt;</span> &#123;<span class="hljs-keyword">return</span> result.includes(item) ? result : [...result, item];&#125;, []);&#125;<span class="hljs-built_in">console</span>.log(eliminate4(array)); <span class="hljs-comment">//[3, 5, 4, 6, 0, NaN]</span></code></pre><h2 id="方法五：排序后去重"><a href="#方法五：排序后去重" class="headerlink" title="方法五：排序后去重"></a>方法五：排序后去重</h2><pre><code class="hljs maxima">function eliminate5(arr) &#123;<span class="hljs-built_in">let</span> <span class="hljs-built_in">copy</span> = arr.<span class="hljs-built_in">sort</span>((a, b) =&gt; a-b);<span class="hljs-built_in">let</span> result = [];<span class="hljs-built_in">let</span> fir = result[<span class="hljs-number">0</span>] = <span class="hljs-built_in">copy</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i = <span class="hljs-number">1</span>, len = <span class="hljs-built_in">copy</span>.<span class="hljs-built_in">length</span>; i &lt; len; i++) &#123;fir === <span class="hljs-built_in">copy</span>[i] || result.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">copy</span>[i]);fir = <span class="hljs-built_in">copy</span>[i];&#125;&#125;</code></pre><p>先排序，让后一个与前一个相比较，不相等则可以保留</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object|Array之实例创建</title>
    <link href="/2020/10/25/Object%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BA/"/>
    <url>/2020/10/25/Object%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="1-对象实例的创建"><a href="#1-对象实例的创建" class="headerlink" title="1.对象实例的创建"></a>1.对象实例的创建</h3><h4 id="1-new操作符"><a href="#1-new操作符" class="headerlink" title="1.new操作符"></a>1.new操作符</h4><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<span class="hljs-comment">//可以通过访问属性来动态创建属性</span>person.name = <span class="hljs-string">&quot;Sarry&quot;</span>;person.age = <span class="hljs-number">20</span>;</code></pre><h4 id="2-对象字面量-使用较多"><a href="#2-对象字面量-使用较多" class="headerlink" title="2.对象字面量(使用较多)"></a>2.对象字面量(使用较多)</h4><p>对象定义的简写形式，目的在于简化创建大量的属性的对象的过程。但是需要注意的是，对象字面量的创建并不会调用Object的构造函数</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> individual = &#123;    name: <span class="hljs-string">&quot;Sarry&quot;</span>,    age: <span class="hljs-number">20</span>&#125;</code></pre><p><code>注意：在最后一个属性添加逗号，会在IE7及更早的版本和Opera中导致错误</code></p><ul><li>这里的花括号是出现在<code>上下文表达式</code>中，故左边的花括号意味着对象字面量的开始；而出现在<code>语法上下文</code>，是代表语法块的开始</li><li>如果形参需要传递大量的可选参数，ES5的做法是使用对象，不过ES6中新增了默认参数值的设定</li></ul><h4 id="3-属性访问-方括号所特有的"><a href="#3-属性访问-方括号所特有的" class="headerlink" title="3.属性访问(方括号所特有的)"></a>3.属性访问(方括号所特有的)</h4><ul><li>通过变量访问属性</li><li>导致语法错误的字符，比如中间有空格是我字符串</li><li>属性名为关键字或保留字</li></ul><div class="note note-info">            <p>一般情况下，都是通过点语法访问属性，但是上面这些特殊情况使用点语法会报错，这时就只能使用方括号语法访问。</p>          </div><h3 id="2-数组的创建"><a href="#2-数组的创建" class="headerlink" title="2.数组的创建"></a>2.数组的创建</h3><h4 id="1-new操作符-1"><a href="#1-new操作符-1" class="headerlink" title="1.new操作符"></a>1.new操作符</h4><h5 id="1-1-仅有一个数字时"><a href="#1-1-仅有一个数字时" class="headerlink" title="1.1 仅有一个数字时"></a>1.1 仅有一个数字时</h5><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 注意：这时创建一个length为10的空数组</span></code></pre><h5 id="1-2其他"><a href="#1-2其他" class="headerlink" title="1.2其他"></a>1.2其他</h5><pre><code class="hljs js"><span class="hljs-keyword">let</span> music = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;jazz&quot;</span>); <span class="hljs-comment">// [&quot;jazz&quot;]</span><span class="hljs-keyword">let</span> mix = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;juice&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// [3, &quot;juice&quot;, true]</span></code></pre><h4 id="2-对象字面量-使用较多-1"><a href="#2-对象字面量-使用较多-1" class="headerlink" title="2.对象字面量(使用较多)"></a>2.对象字面量(使用较多)</h4><p>同样，数组字面量的创建并不会调用Array的构造函数</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">3</span>]; <span class="hljs-comment">// 这就是创建了一个数组项，要注意构造器的差异</span><span class="hljs-keyword">let</span> mix = [<span class="hljs-number">3</span>, <span class="hljs-string">&quot;juice&quot;</span>, <span class="hljs-literal">true</span>];</code></pre><p>哈哈，是不是字面量的创建更简洁，据说效率比构造器要高一点</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主谓补(SVC)|主谓宾宾补(SVOC)</title>
    <link href="/2020/10/05/SVC%E5%8F%A5%E5%9E%8B/"/>
    <url>/2020/10/05/SVC%E5%8F%A5%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>从来没想过英语中的主谓补(也就是我们熟悉的主系表)会和主谓宾宾补有千丝万缕的关系。这两个句式隶属于五大基本句型，掌握简单句也是很重要的喔。我曾经认为简单句无需花费什么心思，但是当面对各种长难句，大概意思一知半解。有时面对一些简单句，也并不能说出个所以然来，所以打算整理为笔记，梳理自己对语法的理解。</p>          </div><h2 id="1-SVC-主谓补"><a href="#1-SVC-主谓补" class="headerlink" title="1. SVC(主谓补)"></a>1. SVC(主谓补)</h2><p>英语中有这么一类动词是系动词，它和实义动词是不一样的。(补充一点：为什么会只有五个基本句型，实际是因为有<strong>五种特性不同的动词</strong>)</p><h3 id="1-1-实意动词-VS-系动词"><a href="#1-1-实意动词-VS-系动词" class="headerlink" title="1.1 实意动词 VS 系动词"></a>1.1 实意动词 VS 系动词</h3><p>一句话，说白了就是传递某件事情的信息，是要有实际的意义。而主语通常是叙述的对象，谓语是构成叙述的主要内容；这也就能解释为什么一句话必须要有主谓，其他成分或许可有可无。</p><h4 id="1-1-1-实意动词"><a href="#1-1-1-实意动词" class="headerlink" title="1.1.1 实意动词"></a>1.1.1 实意动词</h4><p>接触过英语的你肯定知道实意动词包括及物动词和不及物动词。但是，或许有人不知道这两类动词的区别。</p><h5 id="一-、不及物动词"><a href="#一-、不及物动词" class="headerlink" title="一 、不及物动词"></a><strong>一 、不及物动词</strong></h5><p>可独立发生，不牵涉到其他的人或物。而主语是该动作的发出者，故该类动词只有主动，没有被动（这也就是主谓结构）</p><div class="note note-danger">            <p>Tom died in World War Two.</p><p>这句话的叙述对象是Tom，也就是讲了一件关于Tom的事情。什么事情呢？”死了”，这就是整件事的核心内容，后面的成分是时间状语，修饰谓语动词，使得这件事描述的更详细点，是死于第二次世界大战，不是其他的时间点。</p>          </div><h5 id="二、及物动词"><a href="#二、及物动词" class="headerlink" title="二、及物动词"></a><strong>二、及物动词</strong></h5><p>不独立发生，需要作用在其他的人或物上(也就是宾语)，要不然意思会不完整。因为有该动作的承受对象，所以该类动词是有被动的语态。</p><div class="note note-danger">            <p>Tom ate a host of desserts.</p><p>同理，”吃”是整件事的核心内容，但是，需要有东西被吃，才能使这件事叙述完整。而零食就是宾语</p>          </div><p>总结一下，实意动词是有实际意思的，是构成叙述的主要内容，是一句话的关键。尽管及物动词后面不带宾语，是错误的结构，但是也是能表达一定的意思，只是该意思并不完全。</p><hr><h4 id="1-1-2-系动词"><a href="#1-1-2-系动词" class="headerlink" title="1.1.2 系动词"></a>1.1.2 系动词</h4><p><strong>在所有的英语动词中，只有解释为”是”的动词是空的，完全没有意义。</strong>而系动词，就是这类动词，没有叙述能力，只是把主语和后面构成叙述的部分连接起来，又可称为”连缀动词”(Link Verb)。跟在这种动词后面的部分，代替了动词的作用，补足句子使它获得完整的意思，称之为”补语”。而SVC句式中的V指的就是系动词。</p><div class="note note-danger">            <p>John Smith was a soldier.</p><p>was这个动词并没有告诉我们关于John Smith任何事情，叙述主要内容落在了a soldier上，而a soldier充当主语的补语，即为主补。was只是作为中间物，将前者和后者画上等号，串联起来。</p>          </div><h5 id="一、系动词的分类"><a href="#一、系动词的分类" class="headerlink" title="一、系动词的分类"></a><strong>一、系动词的分类</strong></h5><ul><li>状态系动词：be动词(记住，所有的时态哦，不要单单只以为是现在时态) —-&gt;  翻译为”是”</li><li>感官系动词：look/smell/taste/feel/sound </li><li>表像系动词：appear/seem —-&gt;  翻译为”显得是，似乎是”</li><li>变化系动词：become/turn/get/fall/run/come/go/grow  —-&gt;  翻译为”成为”</li><li>持续系动词：keep/remain/stay/stand —-&gt;  翻译为”保持为”</li><li>终止系动词：prove/turn out —-&gt;  翻译为”结果是”</li><li>make  —-&gt;  翻译为”作为”</li></ul><p>可能此时的你会有疑惑，这不是翻译出实际的意思出来了吗，但是不是这样的哦，它们的着重点还是”是”，只不过翻译中，可以解释为各种各样的”是”，从而让你的表达更准确。**(所以说，任何be出现的地方，都可以换做下面的词)**</p><div class="note note-danger">            <p>That dress is pretty  那件裙子很漂亮</p><p>That dress looks pretty  那件裙子看上去很漂亮</p><p>其实两句话等同，但第二句话明显比第一句高级了那么一丢丢</p>          </div><h5 id="二、不必翻译"><a href="#二、不必翻译" class="headerlink" title="二、不必翻译"></a>二、不必翻译</h5><div class="note note-danger">            <p>I am more than delighted.  我非常开心</p>          </div><p>这句话的翻译，完全没有动词的出现。当然，在汉语中，这么说是完全没有语法错误。但是，在英语中，谓语是一定一定不能少的，即使它并没有意思。这也就充分表现出来，翻译为”是”的动词，是没有实际意义的。</p><p><strong>So，当你在写作或翻译时，如果一句话没有谓语(动词)的话，请想一想我们的系动词，它或许能派上用场。</strong></p><hr><h4 id="1-1-3-小小总结一下"><a href="#1-1-3-小小总结一下" class="headerlink" title="1.1.3 小小总结一下"></a>1.1.3 小小总结一下</h4><p>本来只想说说系动词，因为下面的句型成分有些相似，但是想补充一番动词的重要性，所以不知不觉就讲了这么多，也不知道会不会显得很多余。虽然我举的例子都超级简单，但是我觉得很有代表。</p><h2 id="2-SVOOC-主谓宾宾补"><a href="#2-SVOOC-主谓宾宾补" class="headerlink" title="2. SVOOC(主谓宾宾补)"></a>2. SVOOC(主谓宾宾补)</h2><p>前面花了那么多心思，主要也是为这里做准备。前面说到的SVC，后面的补语是对主语进行说明的(应该可以理解为主补吧？)，那么对于SVOOC，宾补是对宾语进行补充说明的，只是之间没有连缀动词了。因为，一句话中只能有一个谓语动词喔，既然这个句型本身自带了谓语动词，也就不需要多余的动词了。</p><div class="note note-danger">            <p>Most people consider a nurse a good wife.   大多数的人认为护士会是称职的太太</p>          </div><p>进一步的扩展一下下，之前我对双宾和宾补有些模糊，现在有了很清晰的定位：宾补是对宾语的补充说明，则两者是一定有联系的，我们这里可以将宾和宾补抽离出来，中间添加一个系动词，形成SVC结构，如果翻译得通，则就是宾补。双宾后面会有笔记，但可以肯定，两个宾语之间是没有联系的。</p>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐式类型转换</title>
    <link href="/2020/10/04/JS%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/10/04/JS%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>前言：js作为动态类型语言，最大的坑之一就包括类型转换，你可以通过调用内置函数来强制实现类型转换，但是js引擎会在很多你不知道的情况自动实现转换，也就是所谓的隐式转换（敲重点喔，该知识点可能面试会被问到）</p>          </div><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><hr><ul><li><p>大多数情况下，如果两边的运算元不是数值型的话，则会将两边的运算元先转换为数值型(前提是可以被转为数值)，然后再进行运算</p></li><li><p>如果不能转换为数值，则一般都是NaN</p><pre><code class="hljs js"><span class="hljs-literal">undefined</span> + <span class="hljs-number">1</span>  <span class="hljs-comment">// NaN</span><span class="hljs-string">&quot;4px&quot;</span> - <span class="hljs-number">2</span> <span class="hljs-comment">// NaN</span></code></pre></li></ul><h5 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h5><p>加法运算符(+)：</p><ul><li><p>当两边其中有一边为字符串，另一个会转化为字符串，俗称”拼接”</p><pre><code class="hljs js"><span class="hljs-number">123</span> + <span class="hljs-string">&quot;$&quot;</span><span class="hljs-comment">// $123</span><span class="hljs-string">&quot; -9 &quot;</span> + <span class="hljs-number">5</span> <span class="hljs-comment">// &quot; -9 5&quot;</span></code></pre></li></ul><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><hr><p>如果两边的运算元不是数值型的话，则会将两边的运算元转换为数值型；<code>但是如果两边都为字符串，则从左往右按ASCII比较</code></p><h5 id="特殊情况-1"><a href="#特殊情况-1" class="headerlink" title="特殊情况"></a>特殊情况</h5><p>非严格相等(==)：</p><ul><li>undefined和null在相等性检查==中不会进行任何类型转换，它们有自己的比较规则，除了它们互等外，不会等于任何其他的值</li><li>NaN不与任何值相等，即使是自己</li></ul><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><ol><li><p>逻辑非</p><p>会先转换成布尔值，然后取反</p></li><li><p>逻辑与 、 逻辑或</p><p>应用于任何类型，而不仅仅是布尔值。(也就是会返回操作数)</p><p>相同情况：</p><p>若两边都为null，则返回null</p><p>若两边都为NaN，则返回NaN</p><p>若两边都为undefined，则返回undefined</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
